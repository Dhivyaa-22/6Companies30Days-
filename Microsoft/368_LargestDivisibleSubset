class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int dp[] = new int[nums.length];
        return arr(nums,dp,getlds(nums,dp));
    }
    public static int getlds(int[] nums,int[] dp) {
        Arrays.sort(nums);
        Arrays.fill(dp,1);
        int ldssize=1;
        for(int i=1;i<nums.length;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                    ldssize=Math.max(ldssize,dp[i]);
                }
            }
        }
        return ldssize;
    }
    public static List<Integer> arr(int[] nums,int[] dp,int ldssize){
        int prev=-1;
        LinkedList<Integer> lds = new LinkedList<Integer>();
        for(int i=dp.length-1;i>=0;i--){
            if(dp[i]==ldssize && (prev==-1 || prev%nums[i]==0)){
                lds.addFirst(nums[i]);
                ldssize--;
                prev=nums[i];
                
            }
        }
        return lds;
        }
}
