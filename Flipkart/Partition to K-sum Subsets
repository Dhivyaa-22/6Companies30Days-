class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        boolean[] visited= new boolean[nums.length];
        int cursum=0,start=0,sum=0;
      //  int[] subset= new int[];
        for(int num:nums){
            sum+=num;
        }
        if(sum%k!=0) return false;
        if(nums.length<k) return false;
        int subsetsum =  sum/k;
        return partition(nums,visited,0,k,0,subsetsum);        
    }
    private boolean partition(int[] nums,boolean[] visited,int start,int k,int cursum,int subsetsum ){
        if(k==0) return true;
        if(cursum>subsetsum) return false;
        if(cursum==subsetsum) return(partition(nums,visited,0,k-1,0,subsetsum));
    
    for(int i=start;i<nums.length;i++){
        if(visited[i]) continue;
        visited[i]=true;
        if(partition(nums,visited,i+1,k,cursum+nums[i],subsetsum)) return true;
        visited[i]=false;
    }
    return false;
    }
}
