class Solution {
    
    int maxi=0;

    public boolean issafe(int i,int j,int[][]board,int[][]visited){
    
    if((i>=0&&i<board.length)&&(j>=0&&j<board[0].length)&&board[i][j]==1&&visited[i][j]==0){
        return true;
    }

    return false;

    }

    public int dfs(int i,int j,int[][]board,int[][]visited,int count){

    int m=i;
    
    int n=j;

    visited[i][j]=1;

    //for upper
    if(issafe(m+1,n,board,visited)){
        count+=1;
        count=dfs(m+1,n,board,visited,count);
    }
    //for down
    if(issafe(m-1,n,board,visited)){
        count+=1;
        count=dfs(m-1,n,board,visited,count);
    }

    //for right
    if(issafe(m,n+1,board,visited)){
        count+=1;
        count=dfs(m,n+1,board,visited,count);
    } 

    //for left
    if(issafe(m,n-1,board,visited)){
        count+=1;
        count=dfs(m,n-1,board,visited,count);
    }

    return count;

    }   
    
    
    public int maxAreaOfIsland(int[][] grid) {
        
    int[][]visited=new int[grid.length][grid[0].length];
    
    for(int i=0;i<grid.length;i++){
        for(int j=0;j<grid[0].length;j++){
            if(visited[i][j]==0&&grid[i][j]==1){
            maxi=Math.max(dfs(i,j,grid,visited,1),maxi);
            }
        }
    }
    
    return maxi;

    }
}
